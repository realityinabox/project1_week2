=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "PDC1"      (component PDC8544)
   - PDC1_GetWidth -Returns the width of the display in pixels
   - PDC1_GetHeight -Returns the height of the display in pixels
   - PDC1_GetLongerSide -Returns the longer side of the display in pixels
   - PDC1_GetShorterSide -Returns the shorter side of the display in pixels
   - PDC1_SetDisplayOrientation -Sets current display orientation
   - PDC1_GetDisplayOrientation -Returns the current display orientation
   - PDC1_SetPos -Sets the cursor to the given position
   - PDC1_Clear -Clears the whole display memory.
   - PDC1_ClearLine -Clears a character line on the display
   - PDC1_WriteChar -Writes a single character to the display at the current position.
   - PDC1_WriteString -Writes a zero byte terminated string to the display at the current cursor position.
   - PDC1_WriteLineStr -Writes a string to the given line position.
   - PDC1_SetContrast -Sets the display contrast.
   - PDC1_SetMode -Sets the mode of the display (if inverted or not).
   - PDC1_UpdateFull -Updates the whole display
   - PDC1_UpdateRegion -Updates a region of the display
   - PDC1_GetLCD -Method to be called for mutual exclusive access to the LCD
   - PDC1_GiveLCD -Method to be called for mutual exclusive access to the LCD
   - PDC1_Init -Display driver initialization
   - PDC1_Deinit -Module Deinitialization

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "SM1"       (component SPIMaster_LDD)
   - SM1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SM1_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block transmission 
                is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SM1_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation.

Module "rLED"      (component BitIO)
   - rLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - rLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - rLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - rLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.
   - rLED_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "bLED"      (component BitIO)
   - bLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - bLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - bLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - bLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "gLED"      (component BitIO)
   - gLED_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - gLED_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or 
                a register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - gLED_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - gLED_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "ENC_SW_1"  (component ExtInt)
   - ENC_SW_1_GetVal -Returns the actual value of the input pin of the component.

Module "ENC_SW_2"  (component ExtInt)
   - ENC_SW_2_GetVal -Returns the actual value of the input pin of the component.

Module "ENC_PB"    (component ExtInt)
   - ENC_PB_GetVal -Returns the actual value of the input pin of the component.

Module "TI1_SW"    (component TimerInt)
   - TI1_SW_Enable -This method enables the component - it starts the timer. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - TI1_SW_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.

Module "AD1"       (component ADC)
   - AD1_Measure -This method performs one measurement on all channels that are set in the component inspector. (Note: If the 
                <number of conversions> is more than one the conversion of A/D channels is performed specified number of times.)
   - AD1_MeasureChan -This method performs measurement on one channel. (Note: If the <number of conversions> is more than one 
                the conversion of the A/D channel is performed specified number of times.)
   - AD1_GetValue16 -This method returns the last measured values of all channels. Compared with <GetValue> method this method 
                returns more accurate result if the <number of conversions> is greater than 1 and <AD resolution> is less than 
                16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_GetChanValue16 -This method returns the last measured value of the required channel. Compared with <GetChanValue> 
                method this method returns more accurate result if the <number of conversions> is greater than 1 and <AD 
                resolution> is less than 16 bits. In addition, the user code dependency on <AD resolution> is eliminated.
   - AD1_Calibrate -This method starts self calibration process. Calibration is typically used to remove the effects of the 
                gain and offset from a specific reading.

Module "FAT1"      (component FAT_FileSystem)
   - FAT1_open -Open/Create a file
   - FAT1_close -Close a file
   - FAT1_read -Read file
   - FAT1_write -Write to a file
   - FAT1_opendir -Open a directory
   - FAT1_readdir -Read a directory item
   - FAT1_lseek -The f_lseek function moves the file read/write pointer of an open file object. It can also be used to increase 
                the file size (cluster pre-allocation).
   - FAT1_unlink -Remove a file or directory
   - FAT1_mount -Mount/unmount a logical drive
   - FAT1_getfree -Get Number of Free Clusters
   - FAT1_sync -Flush cached data of a writing file
   - FAT1_rename -Delete a file or directory
   - FAT1_isWriteProtected -Determines if the file system is write protected.
   - FAT1_isDiskPresent -Determines if the disk is present or not (e.g. disk inserted).
   - FAT1_mkdir -Creates a directory
   - FAT1_chmod -Changes the attribute of a file or directory   Following attribute flags to be set in one or more combination 
                of the following flags. The specified flags are set and others are cleared.   AM_RDO	Read only   AM_ARC	Archive 
                AM_SYS	System   AM_HID	Hidden
   - FAT1_truncate -Truncates the file size.   The truncate() function truncates the file size to the current file read/write 
                point. This function has no effect if the file read/write pointer is already pointing end of the file.
   - FAT1_stat -The f_stat gets the information of a file or directory. For details of the infomation, refer to the FILINFO 
                structure and f_readdir function. This function is not supported in minimization level of >= 1.
   - FAT1_utime -The f_utime function changes the timestamp of a file or directory
   - FAT1_mkfs -The f_mkfs fucntion creates a file system on the drive.
   - FAT1_chdir -The f_chdir function changes the current directory of the logical drive. The current directory of a drive is 
                initialized to the root directory when the drive is auto-mounted. Note that the current directory is retained 
                in the each file system object so that it also affects other tasks that using the drive.
   - FAT1_chdrive -The f_chdrive function changes the current drive. The initial value of the current drive number is 0. Note 
                that the current drive is retained in a static variable so that it also affects other tasks that using the file 
                functions.
   - FAT1_getcwd -The f_getcwd function retrieves the current directory of the current drive in full path string including 
                drive number.
   - FAT1_errFResultMsg -Returns for a given FatFs FRESULT error code a string
   - FAT1_errDResultMsg -Returns for a given FatFs DRESULT error code a string
   - FAT1_f_gets -Get a string from the file
   - FAT1_f_puts -Put a string to the file
   - FAT1_f_putc -Put a character to the file
   - FAT1_f_printf -Put a formatted string to the file
   - FAT1_f_eof -Wrapper to to the f_eof() macro. Returns 1 if at the end of the file, 0 otherwise.
   - FAT1_f_error -Wrapper to to the f_eof() macro. Returns 1 if at the end of the file, 0 otherwise.
   - FAT1_f_tell -Wrapper to to the f_tell() macro. Returns the file read/write pointer (0 on file open).
   - FAT1_f_size -Wrapper to to the f_size() macro. Returns the file size.
   - FAT1_Init -Initializes the device driver.
   - FAT1_Deinit -Deinitializes the driver.
   - FAT1_get_fattime -Returns the current time

Module "SD1"       (component SD_Card)
   - SD1_Init -Initializes the driver
   - SD1_Deinit -Driver deinitialization routine.
   - SD1_Activate -If multiple devices are used on the same SPI bus, then the device needs to be activated. That way, the 
                different SPI protocol is selected.
   - SD1_Deactivate -Removes/deactivates the card from the bus
   - SD1_isWriteProtected -Determines if the card is write protected. Note that this is an indicator only, as it is still 
                possible to write to the card even if the write protection is set on the card!
   - SD1_CardPresent -Returns true in case a card is present. If there is no card detection pin, then this routine will always 
                return true.
   - SD1_WaitReady -Wait until the card is ready
   - SD1_ReceiveDataBlock -Retrieve a data block from the device
   - SD1_SendDataBlock -Send a data block to the device
   - SD1_SendCmd -Sends a command to the device and returns the response
   - SD1_SetSlowMode -Switches to slow mode SPI communication speed.
   - SD1_SetFastMode -Switches to fast mode SPI communication speed.
   - SD1_InitCommChannel -Method to initialize the communication channel. This is needed if the bus to the SD card is shared 
                with other devices.

Module "TmDt1"     (component GenericTimeDate)
   - TmDt1_AddTick -Needs to be called periodically by the application to increase the time tick count.
   - TmDt1_AddTicks -Same as AddTick(), but multiple ticks can be added in one step.
   - TmDt1_SetTime -This method sets a new actual time.
   - TmDt1_GetTime -This method returns current time.
   - TmDt1_SetDate -This method sets a new actual date.
   - TmDt1_GetDate -This method returns current date.
   - TmDt1_Init -Initialization method
   - TmDt1_DeInit -Deinitializes the driver.

Module "UTIL1"     (component Utility)
   - UTIL1_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL1_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL1_chcat -Adds a single character to a zero byte terminated buffer. It cares about buffer overflow.
   - UTIL1_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL1_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL1_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL1_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL1_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL1_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL1_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL1_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL1_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL1_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL1_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL1_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL1_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL1_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL1_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL1_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL1_strcatNum8Hex -Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum16Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum24Hex -Appends a 32bit unsigned value to a buffer as hex number (without a 0x prefix). Only 24bits are used.
   - UTIL1_strcatNum32Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL1_strcatNum32sDotValue100 -Appends a 32bit signed value to a buffer. The value is in 1/100 units.  For example for the 
                value -13456 it will append the string "-134.56"
   - UTIL1_IsLeapYear -Returns true if a given year is a leap year
   - UTIL1_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL1_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL1_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL1_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL1_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL1_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL1_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL1_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL1_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL1_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL1_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL1_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL1_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL1_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL1_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL1_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL1_ScanDoubleQuotedString -Scans a string inside double quotes and returns it without the double quotes.
   - UTIL1_strcmp -Wrapper to the standard strcmp() routine
   - UTIL1_strncmp -Wrapper to the standard strncmp() routine
   - UTIL1_strFind -Searches a substring inside a string and returns the position.
   - UTIL1_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL1_strlen -Wrapper to the standard strlen() function.
   - UTIL1_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by 
                writing a zero byte to the string!)

Module "TMOUT1"    (component Timeout)
   - TMOUT1_GetCounter -Initializes a new timeout counter and returns the handle to it. At the end, use LeaveCounter() to free 
                up the resource.
   - TMOUT1_LeaveCounter -To be called to return the counter. Note that a counter always should be returned so it can be reused.
   - TMOUT1_Value -Return the current value of the counter (in ticks)
   - TMOUT1_SetCounter -Sets the counter to a new value and returns the value just prior to the call.
   - TMOUT1_CounterExpired -Returns true if the timeout counter has been expired
   - TMOUT1_AddTick -Method to be called from a periodic timer or interrupt. It will decrement all current counters by one down 
                to zero.
   - TMOUT1_Init -Initialization of the driver

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "SM2"       (component SPIMaster_LDD)
   - SM2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SM2_Deinit -This method deinitializes the device. It switches off the device, frees the device data structure memory, 
                interrupts vectors, etc.
   - SM2_Enable -This method enables SPI device. This method is intended to be used together with <Disable()> method to 
                temporary switch On/Off the device after the device is initialized. This method is required if the <Enabled in 
                init. code> property is set to "no" value.
   - SM2_Disable -Disables the SPI device. When the device is disabled, some component methods should not be called. If so, 
                error ERR_DISABLED may be reported. This method is intended to be used together with <Enable()> method to 
                temporary switch on/off the device after the device is initialized. This method is not required. The <Deinit()> 
                method can be used to switch off and uninstall the device.
   - SM2_SendBlock -This method sends a block of characters. The method returns ERR_BUSY when the previous block transmission 
                is not completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation.
   - SM2_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation.
   - SM2_SelectConfiguration -This method selects attributes of communication from the <Attribute set list> and select a chip 
                select from the <Chip select list>. Once any configuration is selected, a transmission can be started multiple 
                times. This method is available if number of chip selects or number of attribute set is greater than 1. If the 
                device doesn't support chip select functionality the ChipSelect parameter is ignored.

Module "TI1"       (component TimerInt)

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "FX1"       (component FXOS8700CQ)
   - FX1_Enable -Enables the device with setting the ACTIVE bit in the CTRL register 1
   - FX1_Disable -Disables the device with clearing the ACTIVE bit in the CTRL register 1
   - FX1_isEnabled -Returns the status of the the ACTIVE bit in the CTRL register 1
   - FX1_SwReset -Perform a software reset using the rst bit in the CTRL register 2
   - FX1_ReadReg8 -Reads an 8bit device register
   - FX1_WriteReg8 -Write an 8bit device register
   - FX1_GetX -Retrieves the value for the X axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetY -Retrieves the value for the Y axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetZ -Retrieves the value for the Z axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetRaw8XYZ -Returns in an array the x, y and z accelerometer as 8bit values.
   - FX1_CalibrateX1g -Performs a calibration of the sensor. It is assumed that the Y and Z sensors have 0 g, and the X sensor 
                has 1 g.
   - FX1_CalibrateY1g -Performs a calibration of the sensor. It is assumed that the X and Z sensors have 0 g, and the Y sensor 
                has 1 g.
   - FX1_CalibrateZ1g -Performs a calibration of the sensor. It is assumed that the X and Y sensors have 0 g, and the Z sensor 
                has 1 g.
   - FX1_GetXmg -Returns the X value in mg
   - FX1_GetYmg -Returns the Y value in mg
   - FX1_GetZmg -Returns the Z value in mg
   - FX1_MeasureGetRawX -Performs a measurement on X channel and returns the raw value.
   - FX1_MeasureGetRawY -Performs a measurement on Y channel and returns the raw value.
   - FX1_MeasureGetRawZ -Performs a measurement on Z channel and returns the raw value.
   - FX1_GetXOffset -Returns the offset applied to the X value.
   - FX1_GetYOffset -Returns the offset applied to the Y value.
   - FX1_GetZOffset -Returns the offset applied to the Z value.
   - FX1_GetX1gValue -Returns the value for 1g for channel  X.
   - FX1_GetY1gValue -Returns the value for 1g for channel  Y.
   - FX1_GetZ1gValue -Returns the value for 1g for channel  Z.
   - FX1_SetFastMode -Turns the F_READ (Fast Read Mode) on or off
   - FX1_WhoAmI -Returns the value of the WHO_AM_I (0x0D) register
   - FX1_GetTemperature -Returns the temperature of the die as signed 8bit values in degree Celsius
   - FX1_GetMagX -Returns the X magnetometer value.
   - FX1_GetMagY -Returns the Y magnetometer value.
   - FX1_GetMagZ -Returns the Z magnetometer value.
   - FX1_MagneticSensorReset -Initiates a magnetic sensor reset cycle that will restore correct operation after exposure to an 
                excessive magnetic field which exceeds the Full Scale Range but is less than the Maximum Applied Magnetic Field.
   - FX1_Init -Initializes the device driver
   - FX1_Deinit -Counterpart to Init() method.

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Init -Initializes the driver.

Module "CI2C1"     (component I2C_LDD)
   - CI2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - CI2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CI2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.

Module "Cpu"       (component MK64FN1M0LQ12)

===================================================================================
