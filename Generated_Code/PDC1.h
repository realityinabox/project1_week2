/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : PDC1.h
**     Project     : Lab2
**     Processor   : MK64FN1M0VLQ12
**     Component   : PDC8544
**     Version     : Component 01.003, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-01-14, 09:09, # CodeGen: 7
**     Abstract    :
**
**     Settings    :
**
**     Contents    :
**         GetWidth              - PDC1_PixelDim PDC1_GetWidth(void);
**         GetHeight             - PDC1_PixelDim PDC1_GetHeight(void);
**         GetLongerSide         - PDC1_PixelDim PDC1_GetLongerSide(void);
**         GetShorterSide        - PDC1_PixelDim PDC1_GetShorterSide(void);
**         SetDisplayOrientation - void PDC1_SetDisplayOrientation(PDC1_DisplayOrientation newOrientation);
**         GetDisplayOrientation - PDC1_DisplayOrientation PDC1_GetDisplayOrientation(void);
**         SetPos                - void PDC1_SetPos(PDC1_PixelDim x, PDC1_PixelDim y);
**         Clear                 - void PDC1_Clear(void);
**         ClearLine             - void PDC1_ClearLine(byte lineNumber);
**         WriteChar             - void PDC1_WriteChar(char ch);
**         WriteString           - void PDC1_WriteString(char *str);
**         WriteLineStr          - void PDC1_WriteLineStr(byte line, char *str);
**         SetContrast           - void PDC1_SetContrast(byte contrast);
**         SetMode               - void PDC1_SetMode(bool inverted);
**         UpdateFull            - void PDC1_UpdateFull(void);
**         UpdateRegion          - void PDC1_UpdateRegion(PDC1_PixelDim x, PDC1_PixelDim y, PDC1_PixelDim w,...
**         GetLCD                - void PDC1_GetLCD(void);
**         GiveLCD               - void PDC1_GiveLCD(void);
**         Init                  - void PDC1_Init(void);
**         Deinit                - void PDC1_Deinit(void);
**
**     License : Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2014, all rights reserved.
**     This an open source software in the form of a Processor Expert Embedded Component.
**     This is a free software and is opened for education, research and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file PDC1.h
** @version 01.00
** @brief
**
*/         
/*!
**  @addtogroup PDC1_module PDC1 module documentation
**  @{
*/         


#ifndef __PDC1_H
#define __PDC1_H

/* MODULE PDC1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "RESpin1.h"
#include "SCEpin1.h"
#include "D_Cpin1.h"
#include "SM1.h"
#include "WAIT1.h"

#include "Cpu.h"

#define PDC1_DISPLAY_HW_NOF_COLUMNS  84u /* number of columns in hardware */
#define PDC1_DISPLAY_HW_NOF_ROWS     48u /* number of rows in hardware */

extern byte PDC1_DisplayBuf[((PDC1_DISPLAY_HW_NOF_ROWS-1)/8)+1][PDC1_DISPLAY_HW_NOF_COLUMNS]; /* buffer for the display */

#ifndef __BWUserType_PDC1_PixelDim
#define __BWUserType_PDC1_PixelDim
  typedef signed char PDC1_PixelDim ;  /* One byte is enough to describe an x/y position. */
#endif
#ifndef __BWUserType_PDC1_PixelCount
#define __BWUserType_PDC1_PixelCount
  typedef word PDC1_PixelCount ;       /* A word is enough to hold the number of pixels (84x48). */
#endif

typedef bool PDC1_PixelColor;          /* one bit is enough to describe the color as we have a monochrome display */

#define PDC1_PIXEL_BLACK  1 /* 1 is a black pixel */
#define PDC1_PIXEL_WHITE  0 /* 0 is a white pixel */
#define PDC1_COLOR_PIXEL_SET      PDC1_PIXEL_BLACK /* color for a pixel set */
#define PDC1_COLOR_PIXEL_CLR      PDC1_PIXEL_WHITE /* color for a pixel cleared */
#define PDC1_COLOR_BLACK          PDC1_PIXEL_BLACK
#define PDC1_COLOR_WHITE          PDC1_PIXEL_WHITE
#define PDC1_COLOR_RED            PDC1_COLOR_BLACK
#define PDC1_COLOR_BRIGHT_RED     PDC1_COLOR_WHITE
#define PDC1_COLOR_DARK_RED       PDC1_COLOR_BLACK
#define PDC1_COLOR_GREEN          PDC1_COLOR_BLACK
#define PDC1_COLOR_BRIGHT_GREEN   PDC1_COLOR_WHITE
#define PDC1_COLOR_DARK_GREEN     PDC1_COLOR_BLACK
#define PDC1_COLOR_BLUE           PDC1_COLOR_BLACK
#define PDC1_COLOR_BRIGHT_BLUE    PDC1_COLOR_WHITE
#define PDC1_COLOR_DARK_BLUE      PDC1_COLOR_BLACK
#define PDC1_COLOR_YELLOW         PDC1_COLOR_BLACK
#define PDC1_COLOR_BRIGHT_YELLOW  PDC1_COLOR_WHITE
#define PDC1_COLOR_ORANGE         PDC1_COLOR_BLACK
#define PDC1_COLOR_GREY           PDC1_COLOR_BLACK
#define PDC1_COLOR_BRIGHT_GREY    PDC1_COLOR_WHITE

typedef enum {
  PDC1_ORIENTATION_PORTRAIT    = 0,
  PDC1_ORIENTATION_PORTRAIT180 = 1,
  PDC1_ORIENTATION_LANDSCAPE   = 2,
  PDC1_ORIENTATION_LANDSCAPE180= 3
} PDC1_DisplayOrientation;

#define PDC1_HW_WIDTH         84u      /* width of display in pixels */
#define PDC1_HW_HEIGHT        48u      /* height of display in pixels */

#define PDC1_HW_SHORTER_SIDE  48u      /* size of shorter display side in pixels */
#define PDC1_HW_LONGER_SIDE   84u      /* size of longer display side in pixels */

void WriteCmd(byte cmd);
void WriteData(byte data);

void PDC1_SetPos(PDC1_PixelDim x, PDC1_PixelDim y);
/*
** ===================================================================
**     Method      :  PDC1_SetPos (component PDC8544)
**     Description :
**         Sets the cursor to the given position
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - The column number (in bits). In the range
**                           of 0...83.
**         y               - The row number (byte rows), in the range of
**                           0..5.
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_Clear(void);
/*
** ===================================================================
**     Method      :  PDC1_Clear (component PDC8544)
**     Description :
**         Clears the whole display memory.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_ClearLine(byte lineNumber);
/*
** ===================================================================
**     Method      :  PDC1_ClearLine (component PDC8544)
**     Description :
**         Clears a character line on the display
**     Parameters  :
**         NAME            - DESCRIPTION
**         lineNumber      - the line number of the line
**                           to be cleared.
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_Init(void);
/*
** ===================================================================
**     Method      :  PDC1_Init (component PDC8544)
**     Description :
**         Display driver initialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_WriteChar(char ch);
/*
** ===================================================================
**     Method      :  PDC1_WriteChar (component PDC8544)
**     Description :
**         Writes a single character to the display at the current
**         position.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ch              - Char to be written to the display.
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_WriteString(char *str);
/*
** ===================================================================
**     Method      :  PDC1_WriteString (component PDC8544)
**     Description :
**         Writes a zero byte terminated string to the display at the
**         current cursor position.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to string to be written to the
**                           display.
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_WriteLineStr(byte line, char *str);
/*
** ===================================================================
**     Method      :  PDC1_WriteLineStr (component PDC8544)
**     Description :
**         Writes a string to the given line position.
**     Parameters  :
**         NAME            - DESCRIPTION
**         line            - The line number, starting with 1.
**       * str             - Pointer to zero byte terminated string
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_UpdateRegion(PDC1_PixelDim x, PDC1_PixelDim y, PDC1_PixelDim w, PDC1_PixelDim h);
/*
** ===================================================================
**     Method      :  PDC1_UpdateRegion (component PDC8544)
**     Description :
**         Updates a region of the display
**     Parameters  :
**         NAME            - DESCRIPTION
**         x               - x coordinate
**         y               - y coordinate
**         w               - width of the region
**         h               - height of the region
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_UpdateFull(void);
/*
** ===================================================================
**     Method      :  PDC1_UpdateFull (component PDC8544)
**     Description :
**         Updates the whole display
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_SetContrast(byte contrast);
/*
** ===================================================================
**     Method      :  PDC1_SetContrast (component PDC8544)
**     Description :
**         Sets the display contrast.
**     Parameters  :
**         NAME            - DESCRIPTION
**         contrast        - Contrast value, must be in the
**                           range of  0 >= x < 128
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_SetMode(bool inverted);
/*
** ===================================================================
**     Method      :  PDC1_SetMode (component PDC8544)
**     Description :
**         Sets the mode of the display (if inverted or not).
**     Parameters  :
**         NAME            - DESCRIPTION
**         inverted        - Pass TRUE to have the display
**                           operate in inverted mode, FALSE for normal
**                           mode.
**     Returns     : Nothing
** ===================================================================
*/

PDC1_DisplayOrientation PDC1_GetDisplayOrientation(void);
/*
** ===================================================================
**     Method      :  PDC1_GetDisplayOrientation (component PDC8544)
**     Description :
**         Returns the current display orientation
**     Parameters  : None
**     Returns     :
**         ---             - current display orientation
** ===================================================================
*/

#define PDC1_GetWidth() \
  PDC1_HW_WIDTH

/*
** ===================================================================
**     Method      :  PDC1_GetWidth (component PDC8544)
**     Description :
**         Returns the width of the display in pixels
**     Parameters  : None
**     Returns     :
**         ---             - width of display
** ===================================================================
*/

#define PDC1_GetHeight() \
  PDC1_HW_HEIGHT

/*
** ===================================================================
**     Method      :  PDC1_GetHeight (component PDC8544)
**     Description :
**         Returns the height of the display in pixels
**     Parameters  : None
**     Returns     :
**         ---             - height of display
** ===================================================================
*/

#define PDC1_GetLongerSide() \
  PDC1_HW_LONGER_SIDE

/*
** ===================================================================
**     Method      :  PDC1_GetLongerSide (component PDC8544)
**     Description :
**         Returns the longer side of the display in pixels
**     Parameters  : None
**     Returns     :
**         ---             - longer side of display
** ===================================================================
*/

#define PDC1_GetShorterSide() \
  PDC1_HW_SHORTER_SIDE

/*
** ===================================================================
**     Method      :  PDC1_GetShorterSide (component PDC8544)
**     Description :
**         Returns the shorter side of the display in pixels
**     Parameters  : None
**     Returns     :
**         ---             - shorter side of display
** ===================================================================
*/

void PDC1_SetDisplayOrientation(PDC1_DisplayOrientation newOrientation);
/*
** ===================================================================
**     Method      :  PDC1_SetDisplayOrientation (component PDC8544)
**     Description :
**         Sets current display orientation
**     Parameters  :
**         NAME            - DESCRIPTION
**         newOrientation  - the new orientation
**                           for the display
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_GetLCD(void);
/*
** ===================================================================
**     Method      :  PDC1_GetLCD (component PDC8544)
**     Description :
**         Method to be called for mutual exclusive access to the LCD
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void PDC1_GiveLCD(void);
/*
** ===================================================================
**     Method      :  PDC1_GiveLCD (component PDC8544)
**     Description :
**         Method to be called for mutual exclusive access to the LCD
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void SM1_OnBlockReceived(LDD_TUserData *UserDataPtr);

void PDC1_Deinit(void);
/*
** ===================================================================
**     Method      :  PDC1_Deinit (component PDC8544)
**     Description :
**         Module Deinitialization
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END PDC1. */
void PDC1_Splash(void);
void PDC1_splash_image(void);
void PDC1_weather_image(int, int, int);
int DoubleNibble(int nib);
int * PDC1_MakeCharBigger(char c);
int PDC1_WriteCharBigger(char c, int x, int y);
int PDC1_WriteStringBigger(char *str, int, int);

#endif
/* ifndef __PDC1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.4 [05.11]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
